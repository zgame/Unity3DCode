--local socket = require("socket")
--cs_coroutine = (require 'Lua/XLua/cs_coroutine')
--
--
--local host = "127.0.0.1"
--local port = 8123
--local sock
--local recvt, sendt, status
--
--function ConnectToServer()
--    sock = socket.connect(host, port)
--    if sock == nil then
--        print("无法连接服务器")
--        return 
--    end
--    sock:settimeout(0)
--    SendMsgToServer(1)
--    --ReceiveMsgFromServer()
--    
--    --cs_coroutine.start(ReceiveMsgFromServer())
--    coroutine.create(ReceiveMsgFromServer())   -- 创建协程处理网络消息
--    SendMsgToServer(2)
--end
--
--
--function ReceiveMsgFromServer()
--    while true do
--        recvt, sendt, status = socket.select({sock}, nil, 1)
--        print("select")
--        while #recvt > 0 do
--            local response, receive_status = sock:receive()
--            if receive_status ~= "closed" then
--                if response then
--                    print(response)
--                    --recvt, sendt, status = socket.select({sock}, nil, 1)
--                end
--            else
--                print("网络已经中断")
--                return 
--            end
--        end
--        print("run")
--        --coroutine.yield(CS.UnityEngine.WaitForSeconds(0.2))     -- 这里用协程暂停0.2秒
--    end
--end
--
--function SendMsgToServer(msg)
--    sock:send("hello unity  " .. msg.."\n")
--end
--
--ConnectToServer()
----------------------------------------------------------------------------------
--require("Lua/Common/LuaUtil")
--
--local hallSocket = CS.Networks.HjTcpNetwork()
--
--local function OnConnect(self, sender, result, msg)
--    print(result)
--    if result < 0 then
--        print("Connect err : "..msg)
--        return
--    end
--
--    hallSocket:SendMessage("sssssssssssss")
--end
--
--local function OnClose(self, sender, result, msg)
--    print(result)
--    if result < 0 then
--        print("Close err : "..msg)
--        return
--    end
--end
--
--local function OnReceivePackage(bytes)
--    print(bytes)
--end
--
--
--hallSocket.ReceivePkgHandle = Bind(nil, OnReceivePackage)
----hallSocket.ReceivePkgHandle = OnReceivePackage
--hallSocket.OnConnect = Bind(nil, OnConnect)
--hallSocket.OnClosed = Bind(nil, OnClose)
--hallSocket:SetHostPort("127.0.0.1", 8123)
--hallSocket:Connect()
--
--print(hallSocket:IsConnect())
--print("ffffffffff")

---------------------------rapidjson-------------------------------------------------
--local rapidjson = require('rapidjson')
--local t = rapidjson.decode('{"a":123}')
--print(t.a)
--t.a = "4ddddd56"
--local s = rapidjson.encode(t)
--print('json', s)

--------------------------lua protocol----------------------------------------------
--local pb = require "pb"
--local protoc = require "Lua/Common/protoc"
--
---- load schema from text
--assert(protoc:load [[
--   message Phone {
--      optional string name        = 1;
--      optional int64  phonenumber = 2;
--   }
--   message Person {
--      optional string name     = 1;
--      optional int32  age      = 2;
--      optional string address  = 3;
--      repeated Phone  contacts = 4;
--   } ]])
--
---- lua table data
--local data = {
--    name = "ilse",
--    age  = 18,
--    contacts = {
--        { name = "alice", phonenumber = 12312341234 },
--        { name = "bob",   phonenumber = 45645674567 }
--    }
--}
--
---- encode lua table data into binary format in lua string and return
--local bytes = assert(pb.encode("Person", data))
--print(pb.tohex(bytes))
--
---- and decode the binary data back into lua table
--local data2 = assert(pb.decode("Person", bytes))
--
--
--print(require "Lua/Common/serpent".block(data2))


----------------------------------------------------------------------
--local pb = require "pb" -- 载入 pb.dll
--assert(pb.loadfile "Assets/AssetPackage/Lua/Net/LuaProtocol/addressbook.txt") -- 载入刚才编译的pb文件
--local person = { -- 我们定义一个addressbook里的 Person 消息
--    name = "Alice",
--    id = 12345,
--    phone = {
--        { number = "1301234567" },
--        { number = "87654321", type = "WORK" },
--    }
--}
--
---- 序列化成二进制数据
--local data = assert(pb.encode("tutorial.Person", person))
--
---- 从二进制数据解析出实际消息
--local msg = assert(pb.decode("tutorial.Person", data))
--
---- 打印消息内容（使用了serpent开源库）
--print(require "Lua/Common/serpent".block(msg))



--------------------------------------------------------------------------------









