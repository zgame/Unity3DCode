

--------------------------------------------------------------------------------------
--- 玩家的角色
--------------------------------------------------------------------------------------

Character = {}
function Character:New()
    c = {
        Name = "",      
        Type = 0 ,     -- 职业类型
        BattleBTRoot = nil,  -- AI行为树
        BattleBTTimer = nil,  -- AI行为树的定时器
        
        Debug = false,  -- 调试输出
        Model = nil,   -- 模型object
        Animator = nil,  -- 动画控制器

        Enable = false,   -- 激活玩家角色
        PlayerState = StateIdle,   -- 当前状态
        Enemy = nil,     -- 敌人
        UnderAttack = false,   -- 是否被攻击
        
        HP = 100,
        MaxHP = 100,
        Speed = 1,          -- 移动速度
        Distance = 100,      -- 敌人距离
        AttackRange = 1,    -- 攻击范围距离


        HPSlider = nil,    -- 血条
        
        
    }
    setmetatable(c, self)
    self.__index = self
    return c
end

-- AI行为树开始
function Character:BTRootInit(file)
    self.BattleBTRoot = BattleCharacterInit(file, self)
    self.BattleBTTimer = MyTimer:every(BattleAICharacterLoopTimer , function()        BattleCharacterUpdate(BattleAICharacterLoopTimer,self,self.BattleBTRoot, self.Name)   end)
    --MyTimer:after(5, function()        MyTimer:cancel(self.BattleBTTimer)    end)
end

-- AI行为树停止
function Character:BTRootStop()
    MyTimer:cancel(self.BattleBTTimer)
end

-- 加载模型和动画
function Character:LoadGameObject(name)
    self.Name = name
    self.Model = CSLoadAndInstantiatePrefabGameObject(AssetCharacterPath.."/"..name,AssetCharacterPath.."/"..name)
    --local animator1 = monster1:GetComponent(typeof(CS.UnityEngine.Animator))
    self.Animator =  self.Model:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
end

-- 检查动画是否播放完毕
function Character:AnimatorPlayEnd(name, returnIdle,endFunc)
    local info = self.Animator:GetCurrentAnimatorStateInfo(0)
    --print(info:IsName("Attack"))
    --print(info.normalizedTime)
    if info:IsName(name) then
        self:Log("正在播放动画："..name)
        return false
    else
        self:Log("动画播放完毕"..name)
        if returnIdle then
            self.PlayerState = StateIdle
        end
        if endFunc~= nil then
            endFunc()       -- 结束函数
        end
        return true
    end
end

--------------------------------------------------------------------------




-- 玩家是否已经死亡

function Character:CheckPlayerAlive()
    if self.PlayerState == StateDead then
        self:Log("玩家已经死亡")
        return false
    else
        self:Log("玩家活着")
        return true
    end
end



-- 有没有敌人
function Character:CheckEnemyNotExist()
    
    if #BattleEnemyList == 0 then
        self:Log("没有敌人")
        return true
    else
        self:Log("敌人存在")
        return false
    end
end



-- 敌人是否活着
function Character:CheckEnemyLive()
    BattleUIHPSliderPosition(self)
    
    if self.Enemy == nil and #BattleEnemyList == 0 then
        return false  -- 没有活着的敌人
    end
    if self.Enemy ~= nil and self.Enemy.MonsterState == StateDead then
        self:FindNearEnemy()
    end
    return true
end



-----------------------------------跑------------------------

-- 距离的判断
function Character:CheckDistance()
    -- 更新一下距离
    if self.Enemy then
        self.Distance = GetVector3Distance(self.Enemy.Model.transform.localPosition, self.Model.transform.localPosition)
    end
    
    if self.Distance > self.AttackRange then
        self.Log("敌人距离好远， 我要跑过去".. self.Distance)
        return true    -- 距离还远, 需要跑过去
    else
        self:Log("敌人距离近了， 可以揍他了".. self.Distance)
        if self.PlayerState == StateRun then
            self.PlayerState = StateIdle
        end
        --self:Log(self.Name .. "跑到目的地")
        self.Animator:SetTrigger("stoprun")
        return false
    end
end

-- 往目的地跑过去
function Character:PlayerRun()

    if self.PlayerState == StateIdle then
        self.PlayerState = StateRun
        self.Animator:SetTrigger("run")
    end

    if self.PlayerState == StateRun then
        self:Log(self.Name .. "跑步ing，距离:" .. self.Distance)
        
        if self.Distance > self.AttackRange then
            
            -- doTween 来移动角色
            local tween = self.Model.transform:DOMove(CS.UnityEngine.Vector3(self.Model.transform.localPosition.x - self.Speed , self.Model.transform.localPosition.y, self.Model.transform.localPosition.z ),BattleAICharacterLoopTimer)

            local ran = math.random(5)
            if ran == 1 then
                tween:SetEase(CS.DG.Tweening.Ease.InOutCubic)       -- 设定移动方式
            elseif ran == 2 then
                tween:SetEase(CS.DG.Tweening.Ease.OutSine)       -- 设定移动方式
            elseif ran == 3 then
                tween:SetEase(CS.DG.Tweening.Ease.InSine)       -- 设定移动方式
            elseif ran == 4 then
                tween:SetEase(CS.DG.Tweening.Ease.InQuad)       -- 设定移动方式
            elseif ran == 5 then
                tween:SetEase(CS.DG.Tweening.Ease.OutQuad)       -- 设定移动方式
            end
        end
    end

    return false
    
end

---------------------------------------攻击-----------------------------------------
-- 玩家普通攻击
function Character:PlayerAttack()
    self:Log("PlayerAttack    state: "..self.PlayerState)
    
    if self.PlayerState == StateIdle then
        --EnemyHP = EnemyHP - Damage
        self:Log("我方角色 [  普通攻击  ]，剩余血量"..self.Enemy.HP)
        --self.Animator:SetTrigger("stoprun")
        self.Animator:SetTrigger("attack")
        self.PlayerState = StateAttack
        if self.Name == "Human" then
            CreateBattleEffect(self,"Attack")
        end

        self.Enemy.UnderAttack = true
        self.Enemy.HP = self.Enemy.HP - 11
        BattleUIHPSliderShow(self.Enemy)
        BattleUIDamageNumber(self.Enemy.Model, 11)        

        
        return false
    end
    
    if self.PlayerState == StateAttack then
        return self:AnimatorPlayEnd("Attack", true)
    end

end


-- 玩家释放技能
function Character:PlayerSkillAttack()

    self:Log("PlayerSkillAttack")
    if self.PlayerState == StateIdle then
        --EnemyHP = EnemyHP - SkillDamage
        self:Log("敌人被[ 技能 ]打了，剩余血量"..self.Enemy.HP)
        self.Animator:SetTrigger("sp1")
        self.PlayerState = StateSkill
        if self.Name == "Human" then
            CreateBattleEffect(self,"Skill01")
        end
        self.Enemy.UnderAttack = true
        self.Enemy.HP = self.Enemy.HP - 12
        BattleUIHPSliderShow(self.Enemy)
        BattleUIDamageNumber(self.Enemy.Model, 12)
        return false
    end

    if self.PlayerState == StateSkill then
        return  self:AnimatorPlayEnd("Skill01",true)
    end
end


-- 玩家释放技能
function Character:PlayerSkillAttack2()

    self:Log("PlayerSkillAttack2")
    if self.PlayerState == StateIdle then
        --EnemyHP = EnemyHP - SkillDamage
        self:Log("敌人被[ 技能2 ]打了，剩余血量"..self.Enemy.HP)
        self.Animator:SetTrigger("sp2")
        self.PlayerState = StateSkill
        if self.Name == "Human" then
            CreateBattleEffect(self,"Skill02")
        end
        self.Enemy.UnderAttack = true
        self.Enemy.HP = self.Enemy.HP - 13
        BattleUIHPSliderShow(self.Enemy)
        BattleUIDamageNumber(self.Enemy.Model, 13)
        return false
    end

    if self.PlayerState == StateSkill then
        return  self:AnimatorPlayEnd("Skill02",true)
    end
end

---------------------------------------被攻击-----------------------------------------

-- 玩家受到攻击
function Character:PlayerHit()
    self:Log("PlayerHit")
    if self.PlayerState == StateIdle then
        self.HP = self.HP - Damage
        if self.HP > 0 then
            self.PlayerState = StateHit
            self.Animator:SetTrigger("hit")
            self:Log("玩家 受到攻击, hp "..self.HP)
        --else
        --    self:Log("玩家 死了")
        --    self.Animator:SetTrigger("dead")
        --    self.PlayerState = StateDead
        end
        return false
    end
    
    if self.PlayerState == StateHit then
        return  self:AnimatorPlayEnd("Hit",true)
      
    end
end

-- 是否被攻击
function  Character:CheckHit()
    -- 判断是不是受到攻击的状态
    if self.UnderAttack == true then
        if self.PlayerState == StateIdle  then
            self.UnderAttack = false        --  恢复受到攻击的状态 
            return true
        end
        if self.PlayerState == StateRun  then
            self.Animator:SetTrigger("stoprun")     -- 如果跑动中，需要先停下来，再受伤
            self.PlayerState = StateIdle
            self.UnderAttack = false        --  恢复受到攻击的状态 
            return true
        end
    end
    return false
end


---------------------------------------死亡-----------------------------------------
-- 玩家死亡
function Character:PlayerDead()
    self:Log("PlayerDead")
    if self.PlayerState ~= StateDead then
        self:Log("玩家 死了")
        self.Animator:SetTrigger("dead")
        self.PlayerState = StateDead
        return false
    end

    if self.PlayerState == StateDead then
        --return  self:AnimatorPlayEnd("Death",false)
        -- 以后在这里处理复活， 等2秒然后销毁怪物尸体等行为
    end
end



-- 是否死亡
function  Character:CheckDead()
    if self.HP <= 0 then
        return true
    end
    return false
end


---------------------------------------发呆-----------------------------------------

-- 玩家发呆
function Character:PlayerIdle()
    self:Log("玩家发呆一下，马上敌人就出来了")
    self.PlayerState = StateIdle
    return true
end


-- 找到附近的敌人
function Character:FindNearEnemy()
    self.Log("玩家开始找附近的新敌人")
    if #BattleEnemyList == 0 then
        self.Log("找不到敌人")
        return 
    end
    
    local dis = 1000  -- 距离
    local lock = BattleEnemyList[1]  -- 锁定
    for i in ipairs(BattleEnemyList)do
        if BattleEnemyList[i].MonsterState ~= StateDead then
            local now_dis = GetVector3Distance(BattleEnemyList[1].Model.transform.localPosition, self.Model.transform.localPosition)
            if now_dis < dis then
                dis = now_dis
                lock = BattleEnemyList[i]
                self.Log("距离"..dis.."      锁定"..lock.Name)
            end
        end
    end
    
    self.Enemy = lock
end

---------------------------------------输出log-----------------------------------------

-- log
function Character:Log(str)
    if self.Debug then
        print(str)
    end
end