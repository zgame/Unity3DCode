

--------------------------------------------------------------------------------------
--- 玩家的角色
--------------------------------------------------------------------------------------

Character = {}
function Character:New()
    c = {
        Name = "",      
        Type = 0 ,     -- 职业类型
        BattleBTRoot = nil,  -- AI行为树
        BattleBTTimer = nil,  -- AI行为树的定时器
        
        Model = nil,   -- 模型object
        Animator = nil,  -- 动画控制器
        
        PlayerState = StateIdle,   -- 当前状态
        Enemy = nil,     -- 敌人
        
        HP = 100,
        MaxHP = 100,
        Speed = 1,
        Distance = 4,
        
        
        
    }
    setmetatable(c, self)
    self.__index = self
    return c
end

-- AI行为树开始
function Character:BTRootInit(file)
    self.BattleBTRoot = BattleInit(file, self)
    self.BattleBTTimer = MyTimer:every(0.5 , function()        BattleUpdate(0.5,self.BattleBTRoot, self.Name)   end)
    --MyTimer:after(5, function()        MyTimer:cancel(self.BattleBTTimer)    end)
end

-- AI行为树停止
function Character:BTRootStop()
    MyTimer:cancel(self.BattleBTTimer)
end

-- 加载模型和动画
function Character:LoadGameObject(name)
    self.Name = name
    self.Model = CSLoadAndInstantiatePrefabGameObject(AssetMonsterPath.."/"..name,AssetMonsterPath.."/"..name)
    --local animator1 = monster1:GetComponent(typeof(CS.UnityEngine.Animator))
    self.Animator =  self.Model:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
end

-- 检查动画是否播放完毕
function Character:AnimatorPlayEnd(name, returnIdle)
    local info = self.Animator:GetCurrentAnimatorStateInfo(0)
    --print(info:IsName("Attack"))
    --print(info.normalizedTime)
    if info:IsName(name) then
        print("正在播放动画："..name)
        return false
    else
        print("动画播放完毕"..name)
        if returnIdle then
            self.PlayerState = StateIdle
        end
        return true
    end
end

--------------------------------------------------------------------------

-- 距离的判断
function Character:CheckDistance()
    if self.Distance > 1 then
        print("敌人距离好远， 我要跑过去".. self.Distance)
        return true    -- 距离还远, 需要跑过去
    else
        print("敌人距离近了， 可以揍他了".. self.Distance)
        return false
    end
end

-- 往目的地跑过去
function Character:PlayerRun()

    if self.PlayerState == StateIdle then
        self.PlayerState = StateRun
        self.Animator:SetTrigger("run")
    end

    if self.PlayerState == StateRun then
        self.Distance = self.Distance - self.Speed
        print(self.Name .. "跑步ing，距离:" .. self.Distance)
        
        --self.Model.transform.localPosition = CS.UnityEngine.Vector3(0, 0, self.Model.transform.localPosition.z + 1);
        
        if self.Distance <= 1 then
            self.PlayerState = StateIdle
            print(self.Name .. "跑到目的地")
            self.Animator:SetTrigger("stoprun")
        else
            -- doTween 来移动角色
            local tween = self.Model.transform:DOMove(CS.UnityEngine.Vector3(self.Model.transform.localPosition.x, self.Model.transform.localPosition.y, self.Model.transform.localPosition.z + 2),0.5)
        end
    end

    return false
    
end


-- 玩家普通攻击
function Character:PlayerAttack()
    print("PlayerAttack"..self.PlayerState)

    if self.PlayerState == StateIdle then

        EnemyHP = EnemyHP - Damage
        print("敌人被[  普通攻击  ]打了，剩余血量"..EnemyHP)
        --self.Animator:SetTrigger("stoprun")
        self.Animator:SetTrigger("attack")
        self.PlayerState = StateAttack
        --else
        --    print("敌人被[ 普通攻击 ]杀死了")
        --    EnemyType = nil
        --end
        return false
    end
    
    if self.PlayerState == StateAttack then
        return self:AnimatorPlayEnd("Attack", true)
       
        
        --local info = self.Animator:GetCurrentAnimatorStateInfo(0)
        --
        --print(info:IsName("Attack"))
        --print(info.normalizedTime)
        --if info:IsName("Attack") then
        --    print("正在攻击")
        --    return false
        --else
        --    print("攻击动画播放完毕")
        --    self.PlayerState = StateIdle
        --    return true
        --end

    end

end


-- 玩家释放技能
function Character:PlayerSkillAttack()
    print("PlayerSkillAttack")
    if self.PlayerState == StateIdle then
        EnemyHP = EnemyHP - SkillDamage
        print("敌人被[ 技能 ]打了，剩余血量"..EnemyHP)
        self.Animator:SetTrigger("sp1")
        self.PlayerState = StateSkill
        return false
    end

    if self.PlayerState == StateSkill then
        return  self:AnimatorPlayEnd("Skill01",true)
    end
end


-- 玩家释放技能
function Character:PlayerSkillAttack2()
    print("PlayerSkillAttack2")
    if self.PlayerState == StateIdle then
        EnemyHP = EnemyHP - SkillDamage
        print("敌人被[ 技能2 ]打了，剩余血量"..EnemyHP)
        self.Animator:SetTrigger("sp2")
        self.PlayerState = StateSkill
        return false
    end

    if self.PlayerState == StateSkill then
        return  self:AnimatorPlayEnd("Skill02",true)
    end
end


-- 玩家受到攻击
function Character:PlayerHit()
    print("PlayerHit")
    if self.PlayerState == StateIdle then
        self.HP = self.HP - Damage
        if self.HP > 0 then
            self.PlayerState = StateHit
            self.Animator:SetTrigger("hit")
            print("玩家 受到攻击, hp "..self.HP)
        else
            print("玩家 死了")
            self.Animator:SetTrigger("dead")
            self.PlayerState = StateDead
        end
        return false
    end
    
    if self.PlayerState == StateHit then
        return  self:AnimatorPlayEnd("Hit",true)
        --if playEnd then
        --    self.PlayerState = StateIdle
        --    return true
        --else
        --    return false
        --end
        
        --local info = self.Animator:GetCurrentAnimatorStateInfo(0)
        --if info:IsName("Hit") then
        --    print("正在被打动画")
        --    return false
        --else
        --    print("hit动画播放完毕")
        --    self.PlayerState = StateIdle
        --    return true
        --end
    end
end



-- 玩家死亡
function Character:PlayerDead()
    print("PlayerDead")
    if self.PlayerState == StateIdle then
            print("玩家 死了")
            self.Animator:SetTrigger("dead")
            self.PlayerState = StateDead
        return false
    end

    if self.PlayerState == StateDead then
        return  self:AnimatorPlayEnd("Death",false)
        --if playEnd then
        --    self.PlayerState = StateIdle
        --    return true
        --else
        --    return false
        --end
        
        --local info = self.Animator:GetCurrentAnimatorStateInfo(0)
        --if info:IsName("Death") then
        --    print("正在死亡动画")
        --    return false
        --else
        --    print("死亡动画播放完毕")
        --    --self.PlayerState = StateIdle
        --    return true
        --end
    end
end


-- 玩家发呆
function Character:PlayerIdle()
    print("玩家发呆一下，马上敌人就出来了")
    self.PlayerState = StateIdle
    return true
end

