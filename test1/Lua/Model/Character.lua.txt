

--------------------------------------------------------------------------------------
--- 玩家的角色
--------------------------------------------------------------------------------------

Character = {}
function Character:New()
    c = {
        Name = "",      
        Type = 0 ,     -- 职业类型
        BattleBTRoot = nil,  -- AI行为树
        BattleBTTimer = nil,  -- AI行为树的定时器
        
        Model = nil,   -- 模型object
        Animator = nil,  -- 动画控制器
        
        PlayerState = StateIdle,   -- 当前状态
        Enemy = nil,     -- 敌人
        
        HP = 100,
        MaxHP = 100,
        Speed = 1, 
        
        
        
    }
    setmetatable(c, self)
    self.__index = self
    return c
end

-- AI行为树开始
function Character:BTRootInit(file)
    self.BattleBTRoot = BattleInit(file, self)
    self.BattleBTTimer = MyTimer:every(0.5 , function()        BattleUpdate(0.5,self.BattleBTRoot)   end)
    --MyTimer:after(5, function()        MyTimer:cancel(self.BattleBTTimer)    end)
end

-- AI行为树停止
function Character:BTRootStop()
    MyTimer:cancel(self.BattleBTTimer)
end

-- 加载模型和动画
function Character:LoadGameObject(name)
    self.Name = name
    self.Model = CSLoadAndInstantiatePrefabGameObject(AssetMonsterPath.."/"..name,AssetMonsterPath.."/"..name)
    --local animator1 = monster1:GetComponent(typeof(CS.UnityEngine.Animator))
    self.Animator =  self.Model:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
end


--------------------------------------------------------------------------

-- 距离的判断
function Character:CheckDistance()
    if Distance > 1 then
        print("敌人距离好远， 我要跑过去")
        return true    -- 距离还远, 需要跑过去
    else
        print("敌人距离近了， 可以揍他了")
        return false
    end
end

-- 往目的地跑过去
function Character:PlayerRun()

    Distance = Distance - Speed
    print(self.Name .. "跑步ing，距离:" .. Distance)
    PlayerState = StateRun
    self.Model.transform.localPosition = CS.UnityEngine.Vector3(0, 0, self.Model.transform.localPosition.z + 1);
    self.Animator:SetTrigger("run")

    if Distance <= 1 then
        PlayerState = StateIdle
        print(self.Name .. "跑到目的地")
        self.Animator:SetTrigger("stoprun")
    end

    return false
    
end


-- 玩家普通攻击
function Character:PlayerAttack()
    --if EnemyHP > 0 then

    if PlayerState == StateIdle then

        EnemyHP = EnemyHP - Damage
        print("敌人被[  普通攻击  ]打了，剩余血量"..EnemyHP)
        --self.Animator:SetTrigger("stoprun")
        self.Animator:SetTrigger("attack")
        PlayerState = StateAttack
        --else
        --    print("敌人被[ 普通攻击 ]杀死了")
        --    EnemyType = nil
        --end
        return false
    end
    
    if PlayerState == StateAttack then
        local info = self.Animator:GetCurrentAnimatorStateInfo(0)

        print(info:IsName("Attack"))
        print(info.normalizedTime)
        if info:IsName("Attack") then
            print("正在攻击")
            return false
        else
            print("攻击动画播放完毕")
            PlayerState = StateIdle
            return true
        end

    end

end


-- 玩家释放技能
function Character:PlayerSkillAttack()
    if PlayerState == StateIdle then
        EnemyHP = EnemyHP - SkillDamage
        print("敌人被[ 技能 ]打了，剩余血量"..EnemyHP)
        self.Animator:SetTrigger("sp1")
        PlayerState = StateSkill
        return false
    end

    if PlayerState == StateSkill then
        local info = self.Animator:GetCurrentAnimatorStateInfo(0)
        print(info:IsName("skill01"))
        print(info.normalizedTime)
        if info:IsName("skill01") then
            print("正在技能攻击")
            return false
        else
            print("技能攻击动画播放完毕")
            PlayerState = StateIdle
            return true
        end

    end
end

-- 玩家受到攻击
function Character:PlayerHit()
    if PlayerState == StateIdle then
        HP = HP - Damage
        if HP < 0 then
            PlayerState = StateHit
            self.Animator:SetTrigger("hit")
            print("玩家 受到攻击, hp "..HP)
        else
            print("玩家 死了")
            self.Animator:SetTrigger("dead")
            PlayerState = StateDead
        end
        return false
    end
    
    if PlayerState == StateHit then
        local info = self.Animator:GetCurrentAnimatorStateInfo(0)
        if info:IsName("hitted") then
            print("正在被打动画")
            return false
        else
            print("hit动画播放完毕")
            PlayerState = StateIdle
            return true
        end
    end
end